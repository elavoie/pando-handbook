#!/usr/bin/env node

var pull = require('pull-stream')
var toPull = require('stream-to-pull-stream')
var split = require('split')
var log = require('debug')('process')
var fs = require('fs')
var path = require('path')
var argv = require('minimist')(process.argv)
var childProcess = require('child_process')
var ram = require('random-access-memory')
var hyperdrive = require('hyperdrive')
var discovery = require('hyperdiscovery')
var stubborn = require('pull-stubborn')

function help () {
  console.error(fs.readFileSync(path.join(__dirname, 'src', 'process_usage.txt')).toString())
  process.exit(0)
}

function close (code) {
  log('closing(' + code + ')')
  process.exit(code)
}

if (argv.help || argv._.length < 3) {
  help()
}

var child = childProcess.spawn('pando', ['--stdin', argv._[2]].concat(argv._.slice(3)), { stdio: ['pipe', 'pipe', process.stderr] })
var processor = {
  sink: pull.drain(function (x) {
    log('child input: ' + x)
    child.stdin.write(String(x) + '\n')
  }, function (err) {
    log('processor.input:done(' + err + ')')
    child.stdin.end()
  }),
  source: pull(
    toPull.source(child.stdout.pipe(split(undefined, null, { trailing: false }))),
    pull.through(function (x) {
      log('child output: ' + x)
    })
  )
}

process.stdout.on('error', function (err) {
  log('error: ' + err)
  close(1)
})

pull(
  toPull.source(process.stdin.pipe(split(undefined, null, { trailing: false }))),
  stubborn(
    pull(
      pull.through(function (info) { log('sending input ' + info) }),
      processor
    ),
    function tester (info, cb) {
      log('received output ' + info)
      info = JSON.parse(info)

      // Download
      var link = info.result.datArchive
      var key = link.replace('dat://', '') // extract the key
      var archive = hyperdrive(ram, key)
      archive.ready(function () {
        discovery(archive)
        archive.readFile(
          info.preview, 'binary',
          function (err, data) {
            if (err) {
              console.error(err)
              log('error downloading ' + JSON.stringify(info))
              archive.close()
              return cb(false, info)
            } else {
              var dirPath = path.join(__dirname, 'results', info.entity)
              if (!fs.existsSync(dirPath)) fs.mkdirSync(dirPath)
              var filePath = path.join(dirPath, info.preview)
              fs.writeFileSync(filePath, data)

              log('success downloading ' + JSON.stringify(info))
              archive.close()
              return cb(true, filePath)
            }
          })
      })
    }
  ),
  pull.drain(
    function (v) { console.log(v) },
    function (err) {
      log('drain:done(' + err + ')')
      if (err) {
        close(1)
      } else {
        close(0)
      }
    }
  )
)
